// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    /** Initializes the Screen. */
    function void init() {
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	    var int address, value;
		
		// Get the pixel's mapping address in memory.
		// Set the value to draw the pixel.
		let address = x * 32  + y \ 16;
		let value = y % 16;
		
		do Memory.poke(address, value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	    
		var int dx, dy, diff, a, b, temp, start, end;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let diff = 0;
		let a = 0;
		let b = 0;
		
		// For convenience sake, convert the line drawing
		// from right to left to left to right.
		if (dx < 0) {
		    let temp = x1;
			let x1 = x2;
			let x2 = temp;
		}
		
		// Special case for drawing horizontal line.
		if (dy = 0) {
		    while ((a < dx) | (a = dx)) {
			    do Screen.drawPixel(x1 + a, y);
				let a = a + 1；
			}
			return；
		}
		
		// Special case for drawing vertical line.
		if (dx = 0) {
		    let start = Math.min(y1, y2);
			let end = Math.max(y1, y2);
		    while((b < dy) | (b = dy)) {
		        do Screen.drawPixel(start, end + b);
				let b =  + 1;
			}
			return;
		}
		
		// To bottom right line drawing.
		if (dy > 0) {
		    while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
		        do Screen.drawPixel(x + a, y + b);
		        if (diff < 0) {
			        let a = a + 1;
			        do Screen.drawPixel(x + a, y + b);
				    let diff = diff + dy;
			    }
			
			    else {
			        let b = b + 1;
				    let diff = diff - dx;
			    }
		    }
			return;
		}
		
		
		// To upper right line drawing.
		if (dy < 0) {
		    while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
			    do Screen.drawPixel(x + a, y + b);
				if (diff > 0) {
				    let b = b - 1;
					let diff = diff - dx;
				}
				else {
				    let a = a + 1;
					let diff = diff + dy;
				}
			}
		}
		
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;		
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	    return;
    }
}
