// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array str;
    field int length;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) { let maxLength = maxLength + 1; }
        let str = Array.new(maxLength);
        let length = 0;
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        //do Output.printInt(j);
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j - 1] = c;
        //do Output.printInt(j - 1);
        //do Output.printChar(c);
        //do Output.println();
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do setCharAt(length + 1, c);
        let length = length + 1;
        return this;
        
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) { let length = length - 1; }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int i;
        var int res;
        
        let res = 0;
        let i = 0;
        let isNeg = false;
        
        if (length = 0) { return 0; }
        if (str[0] = 45) { 
            let isNeg = false;
            let i = i + 1;
        }
        while (String.isInt(str[i]) & (i < length)) {
            let res = res * 10;
            let res = res + str[i];
            let i = i + 1;
        }
        
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean isNeg;
        var int lastDigit;
        var char c;
        
        if (val < 0) {
            do appendChar(45);
        }
        let length = 0;
        
        let lastDigit = val - ((val / 10) * 10);
        let c = String.digit2char(lastDigit);
        if (val < 10) {
            do appendChar(c);
            return;
        }
        
        else {
            do setInt(val / 10);
        }
        
        return;
        
        
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    
    /** Checks whether the character is a number */
    function boolean isInt(char c) {
        if ((c < 48) | (c > 57)) { return false; }
        
        return true;
    }
    
    /** Map a character to its digit rep. */
    function int char2digit(char c) {
        return c - 48;
    }
    
    /** Map a digit to its ASCII rep. */
    function char digit2char(int i) {
        return i + 48;
    }
}
